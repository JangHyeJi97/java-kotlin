뷰(View)
 - 기존 테이블(들)을 기반으로 하여 select 쿼리의 결과를 객체로 만들어 놓은 것
 - 생성된 뷰의 사용법은 테이블과 동일
 - 생성법
create view 뷰이름 as select쿼리;

 - 뷰는 테이블과 동일하게 동작하므로 수정이나 삭제도 가능은 함
	단, 아주 특별한 경우가 아니면 뷰를 통해 수정이나 삭제 등의 작업을 하는 것은 바람직하지 않음
 - 뷰 생성시 반드시 명세서도 입력해 놓아야 함
	뷰의 명세서에는 컬럼정보가 아닌 뷰를 생성시킨 select쿼리가 있어야 함

뷰의 장점
 - 보안에 도움이 됨
	뷰를 이루는 컬럼들 외에는 다른 컬럼에 대한 정보를 감추는 역할을 함
 - 복잡한 쿼리를 단순하게 만들어 줌
	복잡한 쿼리로 뷰를 생성하면 다음 부터는 결과를 얻기 위해 복잡한 쿼리 대신 뷰를 이용할 수 있음
	뷰를 호출할 때 마다 뷰 생성시 입력한 select쿼리가 디시 실행되므로 항상 최신 정보를 유지할 수 있음
	 - 즉, 뷰를 사용한다고 해서 속도가 빨라지지는 않음
	 - 뷰에 들어간 컬럼의 종류나 조건의 값이 변경되는 경우 뷰를 사용할 수 없고, 프로시저 등으로 작업해야 함


커서(Cursor)
 - Stored Procedure나 Stored Function에서 사용하는 기능으로 일반 언어의 파일처리나 자바의 ResultSet과 비슷한 형태
 - 테이블에서 여러 행의 레코드를 쿼리로 select한 후 결과를 루프를 돌면서 한 행(레코드)씩 작업할 수 있게 해줌
	직접 원하는 특정 레코드로 한 번에 이동하는 것이 아닌 처음 부터 루프를 돌면서 접근해야 함
 - 문법 : 프로시저 내부에서의 사용
delimiter $$
create procedure 프로시저명()
begin
	declare end_row boolean default false;		-- 커서가 끝까지 루프를 돌았는지 판단할 변수

	declare 커서명 cursor for 커서를 만들 select 문;	-- 지정된 select문으로 커서를 생성

	declare continue handler for not found set end_row = true;
	-- 커서의 끝까지 루프를 돌면 end_row 변수의 값을 true로 변경

	lblLoop:while true do	-- 따로 조건없이 무한 루프로 돌게 함

		fetch 커서명 into 변수명;	-- 커서에 들어있는 데이터를 지정한 변수에 저장
		-- 여러 컬럼을 select해 올 경우 각 컬럼의 값이 들어갈 변수들을 선언 후 쉼표로 연결하면 됨
		-- fetch 커서명 into 변수1, 변수2, ... , 변수n;
		-- 단, select해오는 컬럼의 순서와 값을 저장할 변수의 순서가 동일해야 함

		if end_row then		-- 커서의 끝까지 루프를 돌았으면
			leave lblLoop;	-- 지정한 레이블(lblLoop)의 루프문을 빠져나감
		end if;	-- 빠져나가는 if문은 fetch와 실행문 사이에 있어야 함

		작업할 실행문 or 쿼리문;

	end while;

	close 커서명;		-- 열었던 커서는 닫아줌
end $$
delimiter ;



