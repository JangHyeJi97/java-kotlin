장바구니에서 상품 삭제

[삭제] 버튼 클릭시 동작
1.삭제할건지 여부를 물어본 후 삭제를 선택하면 작업 시작 - js함수를 이용하여 작업

2. 삭제를 위한 url(cart_proc_del)을 서버에 요청

3. 삭제를 위한 컨트롤러(cartProcDelCtrl)에서 그 요청을 받아 처리 시작
 - 삭제에 필요한 데이터들을 받거나(request: 카트아이디-oc_idx) 작업(buyer)하여 처리한 후 service클래스 인스턴스를 생성
 - 서비스 클래스(CartProcDelSvc)에서 리턴받은 레코드 개수를 이용하여 처리한 후 장바구니 화면 [새로 고침]

4. 컨트롤러에서 작업한 데이터들을 매개변수로 받아 db에 연결 후 작업하는 서비스 클래스(CartProcDelSvc) 생성 : cartDelete()
 - DAO클래스(cartProcDao)에서 처리한 결과(삭제된 레코드 개수)를 받아 검사 후 commit() 또는 rollback()을 한 후 레코드 개수를 리턴

5.db작업을 하는 DAO클래스(CartProcDao)에서 실제 삭제작업을 처리함 : cartDelete()
 - delete쿼리 작업 후 레코드 개수를 리턴


장바구니에서 상품 구매
[구매 합니다]나 [전체 구매] 버튼 클릭시 동작
1. [구매합니다]버튼 클릭시에는 현재 선택되어 있는 상품이 있는지 여부를 검사하여 있으면 결제화면으로 이동( 없으면 alert()으로 경고)
 - [전체구매]버튼 클릭시에는 모든 상품의 체크박스를 선택되게 작업한 후 [구매합니다]버튼과 동일하게 처리

2. 구매를 위한 결제화면 url(order_pay)을 서버에 요청

3. 결제화면을 위한 컨트롤러(OrderPayCtrl)에서 카드 인덱스 번호(들)을 받거나 작업하여 처리한 후 service클래스 인스턴스를 생성

4. 컨트롤러에서 작업한 데이터들을 매개변수로 받아 db연결 후 작업하는 서비스 클래스(OrderPaySvc) 생성 
 - 상품 정보 : getCartList(), 배송지 정보 : getAddrList()

5. db작업을 하는 DAO클래스 (OrderProcDao)에서 select한 쿼리 작업을 처리함 - 상품 정보 : getCartList(), 배송지 정보 :getAddr
