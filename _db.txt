DB(MySQL)와 자바와의 연동
 - MySQL이 설치되어 있는 위치로 가서 'C:\Program Files (x86)\MySQL\Connector J 8.0\' 폴더 안에 있는 'mysql-connector-java-8.0.28.jar'파일을 프로젝트 폴더의 'lib'폴더에 복사

 - 커넥터 버전 5.1x 이하
driver = "com.mysql.jdbc.Driver"
url = "jdbc:mysql://localhost:3306/DB명"

 - 커넥터 버전 6.x 이하

driver = "com.mysql.cj.jdbc.Driver";
url = "jdbc:mysql://localhost:3306/mall?useUnicode=true&characterEncoding=UTF8&" + 
	"verifyServerCertificate=false&useSSL=false&serverTimezone=UTC";

 - localhost는 같은 컴퓨터 내에 웹서버와 DB서버가 있다는 의미로 사용한 것이며, DB서버가 물리적으로 다른 곳에 있을 경우 localhost 대신 DB서버의 IP주소를 입력하면 됨(같은 컴퓨터에 있을 경우 'localhost'대신 '127.0.0.1'을 사용해도 됨)
	3306은 MySQL의 포트번호로 다른 번호로 지정했을 경우 그 번호를 사용하면 됨

 - DB관련 객체 및 메소드 사용시 무조건 예회처리(try-catch문 사용)를 해야 함
	대부분의 DB관련 메소드는 throws SQLException 으로 선언되어 있기 때문

 - DB관련 객체 및 메소드를 사용한 후에는 반드시 close() 메소드를 이용하여 객체를 닫아야 함
	그러므로 close()메소드는 try-catch문에서 finally 영역에서 닫는 경우가 많다.


1. java.sql.Statement 인터페이스
 - db에 sql문을 전달해주는 객체로 Connection 객체가 열어놓은 통로를 통해 쿼리를 전달해줌
 - 주요 메소드
리턴타입		메소드명 및 설명
void		close() : Statement 객체를 닫음(하나의 쿼리 실행 후 반드시 닫아줌)
ResultSet	executeQuery(String sql) : 쿼리문들 중 select문을 처리하는 메소드
 - 쿼리의 결과를 table 형식으로 ResultSet 객체에 담아서 리턴
int			executeUpdate(String sql) : insert, update, delete 쿼리들을 실행
 - 리턴값은 쿼리 처리결과로 각각 입력, 수정, 삭제된 레코드의 개수를 리턴


2. java.sql.PreparedStatement 인터페이스
 - Statement 인터페이스를 상속받아 사용하는 인터페이스
 - Statement 인터페이스와 동일하게 쿼리를 DB에 전달하는 작업을 함
	단, Statement 인터페이스와 다르게 값을 파라미터 형태로 전달함
	파라미터들의 인덱스 번호는 0이 아닌 1부터 시작
	파라미터의 값은 set자료형() 메소드를 이용하여 설정함
 - Statement 인터페이스보다 반복적인 작업을 할 경우 좀 더 편하고, 지정할 값이 많을 경우(주로 insert문)에도 사용하기 편함
 - 주요 메소드는 Statement 인터페이스와 동일


3. java.sql.CallableStatement 인터페이스
 - PreparedStatement 인터페이스를 상속받아 사용하는 인터페이스
 - db의 stored procedure 를 실행시키는 Statement 객체
 - 사용법은 PreparedStatement와 같이 파라미터 전달방법으로 실행함


4. java.sql.ResultSet 인터페이스
 - 쿼리들 중 select 쿼리에 대한 결과로 받아오는 객체
 - 테이블(표) 모양으로 받아오며 컬럼명 또는 인덱스 번호를 이용하여 받아온 데이터 하나 하나에 접근할 수 있음
 - 주요 메소드
리턴타입	메소드명 및 설명
void	close() : ResultSet 객체를 닫음
자료형	get자료형(int columnIndex) : ResultSet에서 columnIndex에 해당하는 컬럼의 값을 해당 자료형으로 리턴
 - columnIndex는 0이 아닌 1 부터 시작
자료형	get자료형(String columnName) : ResultSet에서 columnName에 해당하는 컬럼의 값을 해당 자료형으로 리턴
 - 자료형 : int, double, String 등의 자바 자료형이며, getInt(), getString() 등의 메소드명으로 사용하면 됨
boolean	next() : ResultSet의 다음 행(레코드)으로 커서를 내림(다음 행이 있으면 true, 없으면 false를 리턴)
 - 루프문의 조건으로 사용되며, ResultSet을 사용하면 무조건 최소 한 번은 사용해야 하는 메소드
 - ResultSet에 데이터가 들어 있는지 여부를 판단하는 데에도 사용됨
 - 받아온 ResultSet에서 커서의 위치를 한 줄 내리고, 그 줄에 데이터가 있는지 여부를 동시에 검사하는 메소드





