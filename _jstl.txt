JSTL(JSP Standard Tag Library)
 - 데이터 처리와 조건문, 반복문 등의 작업을 스클립틀릿이 아닌 태그 라이브러리로 작업하는 것 : JSP 문서를 단순화 하기 위한 용도로 사용됨
 - 장점
 	빠른 개발 : JSP를 단순화 하는 많은 태그들을 제공해줌
	스크립틀릿을 사용할 필요가 없음 : 디자이너나 퍼블리셔, 프론트 개발자 등이 소스 보기가 편해짐

 - 다운로드
 	https://tomcat.apache.org/download-taglibs 화면 하단의 링크에서 'taglibs-standard-impl-1.2.5.jar', 'taglibs-standard-spec-1.2.5.jar', 'taglibs-standard-jstlel-1.2.5.jar' 의 세개의 파일을 다운 받아 ~/WebContent/WEB_INF/lib 폴더에 저장한 후 사용함
 - JSTL은 일반적으로 JSTL과 EL의 조합을 의미하는 경우가 많음

EL(Express Language)
 - JSP에서 제공하는 표현식(<% %>)을 대신하여 좀 더 편리하게 출력하기 위해 제공되는 언어임
 	예)<%=test%>을 EL로 표현하면 ${test}

 - EL에는 여러 내장 객체가 존재함
 	pageScope : Page 영역(요청을 받은 페이지)에 존재하는 객체를 참조할 때 사용
	requestScope : Request 영역(요청을 받은 페이지와 디스패치 방식ㅇ드로 이동한 페이지 포함)에 존재하는 객체를 참조할때 사용
	sessionScope : Session 영역(사이트 전역을 의미하며, 시간적 제한이 있음)에 존재하는 객체를 참조할때 사용
	application : Application 영역(사이트 전역을 의미하며, 웹서버가 멈출때까지 존재)에 존재하는 객체를 참조할때 사용
	param : 파라미터 값을 얻어올 때 사용
	paramValues : 파라미터 값을 배열로 얻어올때 사용
	header : Header 정보를 얻어올 때 사용
	headerValues : Header 정보를 배열로 얻어올 때 사용
	cookie : 쿠키 객체를 참조할 때 사용

 - EL의 연산자
  산술연산자
	+ - * / % : 사칙연산과 나머지 연산자 (나누기는 div, 나머지는 mod로 사용할 수 있음)
  비교 연산자
	==, eq : 두 값이 같은지 여부
	!=, ne : 두 값이 같지 않은지 여부
	<, lt : 보다 작로 연산자의 왼쪽항이 오른쪽 항보다 작으면 true
	>, gt : 보다 크다로 연산자의 왼쪽항이 오른쪽보다 크면 true
	<=, le : 같거나 작다로 연산자의 왼쪽항이 오른쪽보다 작거나 같으면 true
	>=, ge : 같거나 크다로 연산자의 왼쪽항이 오른쪽보다 크거나 같으면 true
  논리 연산자
  	&&, and : 조건이 모두 참이면 true
	||, or : 조건들 중 하나라도 참이면 true
	!, not : true를 false로, false를 true로 리턴

JSTL의 액션 - JSTL core
 - core는 JSTL의 기본적인 기능들을 구현해 놓은 라이브러리임(분기문, 반복문 등)
 - core 기능을 사용하려면 라이브러리를 페이지에서 등록해야 함
 - core 등록법
  <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %> 를 JSP 페이지 상단에 입력한 후 사용해야 함
  prefix="c" : core 태그를 사용할 때 붙일 접두어로 core이므로 보통 c를 사용함

 - core 라이브러리의 태그들
  출력관련 태그 : <c:out>
   - 문법 : <c:out value="출력값" default="기본값" escapeXml="true or false">
   	value : 출력할 값
	default : 기본값으로 value가 null일 경우 기본값이 출력됨
	escapeXml : 기본값은 false이며, 특수 기호를 처리하는 방법을 지정(true일 경우 '<'를 '&lt;'로 표현)

  변수 설정 및 삭제 태그 : <c:set>, <c:remove>
   - 문법1 : <c:set var="변수명" value="값" [ target="객체" property="값" scope="범위"]>
   	var : 값을 저장할 변수 이름(지정한 영역의 attribute를 의미)
	value : var에서 지정한 변수의 값
	target : 값을 설정할 객체의 프로퍼티로 역시 생략하는 경우가 많음
	scope : 변수를 사용할 수 있는 유효 범위로 page, request, session, application 중 택일(기본값은 page)
  - 문법 2 : <c:remove var="삭제할 변수명" [ scope="범위"]>
  	var : 값을 삭제할 변수명
	scope : 삭제할 범위