CSS(Cascading Style Sheets)
 - HTML만으로는 웹문서를 다양하게 꾸미거나 변경하는데 제약이 있어 이를 보완하려 만들어진 기능

 - 웹표준의 대두 이전에는 주로 문서를 꾸며주는 역할로만 사용도어 그 쓰임새가 한정적이었음
 
 - 웹표준의 대두 이후에는 꾸미는 역할 말고도 레이아웃 지정 및 조절 기능과 꾸미는 모든 기능에 대해 스타일 시트를 사용함
 	기존에 태그로 처리했던 꾸밈 작업들도 이제는 css를 이용하여 작업하게 됨
 
 - 스타일 시트를 사용하면 사이트 제작시에나 제작후 우지 보수시 간편하게 작업이 가능함
 
 - 스타일 시트는 크게 '선택자'와 '선언부'로 나뉘어 짐
 	선택자 : 스타일을 적용할 대상을 지정하는 값(특정 태그나 범위 등을 의미)
	선언부 : 선택자로 지정된 범위에 적용할 스타일 속성과 값을 의미
	문법) 선택자{속성명1:값1; 속성명2:값2-1 값2-2 값2-3; ... 속성명n:값n;}
	 - 속성이 두개 이상일 경우 반드시 세미콜론(;)으로 구분하며, 속성이 하나이거나 마지막속성이면 세미콜론 생략가능
	 	한 속성의 값이 두개 이상일 경우 띄어쓰기로 구분하여 입력하면 됨
	 - 속성의 이름은 HTML과는 다르게 단어를 줄이지 않고 풀네임으로 짓는 경우가 많으며 두 단어 이상일 경우 하이픈(-)으로 연결하여 사용
		예) bgcolor(html속성명) => background-color(css속성명)

 - 주석 : 자바의 여러줄 주석과 동일하ㅕ '/*' 부터 '*/' 까지를 주석을 취급함

CSS적용방식
1.인라인(inline)방식
 - html태그의 style 속성을 이용하여 직접 스타일 시트를 지정하는 방식
 - 가장 우선순위가 높은 방식이며, 태그에 직접 입력되었기 때문에 알아보기가 쉬움
 - 단, 스타일 변경시 style 속성을 사용했던 태그로 다시 와서 작업해야 하기 때문에 번거로움
 	동일한 작업을 한 여러 태그에도 똑같이 다시 작업해야 함
	그러므로 한번만 사용하거나 급하게 작업해야 할 경우가 아니면 사용을 자제해야 함
 - 예) <태그명 style="스타일 시트 내용">...</태그명>

2.내부(internal)방식
 - html 문서 내부에서 스타일 시트를 입력하는 방식으로 <style>태그를 사용
 - 해당 문서 전체에 영향을 미칠수도 있어 인라인 방식보다 넓은 적용범위를 가짐
 - 문서 내부 어디에서든 사용할 수 있으나 일반적으로 <head>태그 내에서 입력
 - 예) <style>스타일 시트 내용</style>

3.외부(external 또는 linking)파일 방식
 - 스타일 시트를 담은 파일(파일명.css)을 따로 생성하여 그 파일을 해당 html문서에 연결하여 사용하는 방식
 - 첫 실행시 가장 느린 방식이나 두번째부터는 이미 받은 파일을 실행하므로 빨라짐
 - 유지보수시 간편하게 작업할 수 있으나, css파일에 대해 정확히 알고 있어야 가능
 - 실무에서 가장 많이 사용되는 방식으로 정의된 스타일의 적용범위가 가장 넓음
 - 예) 
    1) <link type="text/css" rel="stylesheet" href="경로 및 css파일명"/>
    2) import 방식
    	<style type="text/css">
		@import url("경로 및 css파일명");
	</style>
       단, 속도가 link태그 이용방식이 더 빠르므로 link 태그를 이용한 방법을 권장
 - css파일 내부에 다른 css파일을 불러오기 위해 @import를 사용하기도 함
    예)@import url("경로 및 css파일명");


CSS선택자(selector)
 - 스타일을 적용할 대상이나 범위를 지정하는 명령어
 - 선택자가 겹칠 경우에는 작은 범위의 선택자가 우선적으로 실행됨

1. 전체 선택자
 - 선택자 부분에 '*'를 사용하면 모든 요소(태그)에 대해 스타일이 적용되며, '유니버셜 선택자'라고도 함
 - 문법 : * {속성명:값; ...}
	예) * {color:blue;} /*모든 태그 안의 글자색을 파랑으로 지정*/
	일반적으로 전체 선택자는 거의 사용되지 않고, 초반 설정용으로 주로 사용됨

2. type선택자
 - 태그명을 선택자로 사용하는 것을 'type선택자' 또는 '요소, 태그 선택자'라고도 함
 - 문법 : 태그명 {속성명 : 값; ...}
 	예) p {color:blue;} /*모든 p태그 안의 글자색을 파랑으로 지정*/
 - type선택자는 지정한 태그에 대해 모두 스타일을 적용하므로 생각보다 적용범위가 넓음
 	전체 선택자와 비슷하게 사용빈도가 높지 않고, 초반 설정용으로 주로 사용됨
	가장 많이 사용되는 곳은 기본 기능을 가진 태그들의 기능을 없애는 용도로 사용됨(a, ol, ul, strong, em등의 태그)

3. class 선택자
 - 요소에 class 속성을 지정한 경우 해당 class명을 선택자로 사용하는 것
 - class는 요소의 종류에 상관없이 같은 이름으로 여러 요소들을 지정할 수 있으므로 특정 성격을 지닌 그룹으로 스타일을 지정할 때 많이 사용됨
 - 한 페이지에서 같은 이름의 class를 여러개 지정할 수 있고, 한 요소에 여러개의 class명을 띄어쓰기로 구분하여 지정할 수도 있음
 - 문법 : .class명 {속성명:값; ...} /*점(.)으로 class선택자라는 것을 표시함*/
 	예) .note{color:black;} /*note라는 class속성을 가진 요소들의 글자색을 검정으로 지정*/
 - 각기 다른 요소여도 class명이 같으면 class명을 통해 그룹화가 가능하기 때문에 자주 사용됨

4.id선택자
 - 요소에 id속성을 지정한 경우 해당 id명을 선택자로 사용하는 것
 - class와 비슷하나 class와는 다르게 id는 한페이지 내에서 유일한 이름을 가져야 함
 	단, html특성상 동일한 id명이 있어도 오류가 발생하지는 않아 개발자나 퍼블리셔가 알아서 id명을 중복되지 않도록 주의해야함
 - 문법 : #id명{속성명 : 값; ...} /*샾(#)으로 id 선택자라는 것을 표시함*/
 	예)#note{color:black;} /*note라는 id속성을 가진 요소의 글자색을 검정으로 지정*/

5.속성 선택자
 - 요소에서 특정 속성의 값을 기준으로 선택 범위를 지정하는 방식
 - 문법
	요소명[속성명] : 특정요소에서 지정한 속성을 사용한 경우
	예) a[target] : a태그들 중 target속성을 사용한 a태그들에만 스타일 적용
	
	요소명[속성명="값"] : 특정 요소 에서 지정한 속성에 지정한 값을 사용한 경우
	예) a[target="_blank"] : a태그들 중 target속성의 값으로 "_blank"를 사용한 a태그들에만 스타일 적용

	요소명[속성명^="값"] : 특정 요소 에서 지정한 속성에 지정한 값으로 시작하는 경우
	예) a[href^="http"] : a태그들 중 href속성의 값으로 "http"를 사용한 a태그들에만 스타일 적용
	
	요소명[속성명*="값"] : 특정 요소 에서 지정한 속성에 지정한 값을 포함하는 경우
	예) a[href^="www"] : a태그들 중 href속성의 값으로 "www"를 사용한 a태그들에만 스타일 적용

6.가상요소와 가상클래스
1) first-line, first-letter 가상요소
 - 각각 첫 줄과 첫 문자를 의미하는 가상요소로 해당 범위에 스타일을 적용시킴
 - 문법
 	요소명:first-line : 특정 요소의 첫번째 줄에 스타일을 적용
	예) p:first-line : P태그에서 첫번째 줄에만 스타일 적용
	요소명:fist-letter : 특정 요소의 첫번째 문자에 스타일 적용
	예) p:first-letter : p태그에서 첫번째 문자에만 스타일 적용

2)before,after 가상요소 : IE8 이상부터 지원
 - 특정 내용의 이전(before)이나 이후(after)에 글자를 추가하는 선택자
 - 가상의 내용을 추가하는 선택자이나 문서의 스타일을 위해서만 사용해야 하며 문서의 실제내용을 추가하는 용도로 사용하면 안됨
 - 문법
 	요소명:before{content:"추가할 내용";}	/* 지정한 요소의 앞부분에 content속성의 값을 출력 */
	예) p:before{content:"test";}		/* p태그의 앞에 "test"라는 문자열 출력 */
	요소명:after{content:"추가할 내용";}	/* 지정한 요소의 뒷부분에 content속성의 값을 출력 */
	예) p:after{content:"test";}		/* p태그의 뒤에 "test"라는 문자열 출력 */

3)first-child 가상클래스
 - 특정 요소의 자식 요소들 중 첫번째 요소에만 스타일을 적용
 - 문법
 	요소명:first-child{속성명:값;}
	예) p:first-child{color:red;}		/* p태그 내의 자식 태그들 중 첫번째 태그의 글자색을 빨간색으로 지정 */

4)링크 가상 클래스
 - a태그에 적용하는 클래스로 상황에 따른 스타일을 각기 다르게 지정할 수 있음
 - 방문하지 않은 링크(link), 방문한 링크(visited), 마우스 오버(hover), 링크를 누르고 있는 상황(active), 포커스가 적용된 상황
   (focus)등으로 나뉘며 순서를 지켜 입력해야 함
 - 문법
 	a:가상클래스명{속성명:값;}
	a:link{color:black;}	/*클릭하지 않은 링크*/
	a:visited{color:black;}	/*클릭한 링크*/
	a:hover{color:black;}	/*링크에 마우스를 올린 상황*/
	a:active{color:black;}	/*링크를 누르고 있는 상황*/
	a:focus{color:black;}	/*링크에 포커스가 간 상황*/


css 선택자 조합
 - 선택자들을 조합하여 사용할 수 있음
 
 1.하위 선택자(descendant selector)
  - 상위 요소가 포함하고 있는 특정 하위 요소에 스타일을 적용할 때 사용
  - 문법 : 상위선택자 하위선택자{속성명:값; ... ;}
  	예) div p{color:gray;}	/* 모든 div안에 있는 모든 p요소의 글자색 변경*/
	예).txt p {color:red;}	/* class명이 'txt'인 요소 안에 있는 모든 p요소의 글자색 변경*/
 - 자식 선택자 뿐만 아니라 손자 뻘의 요소에도 적용됨

2. 자식 선택자(child selector)
 - 부모 요소의 바로 아래에 있는 자식 요소에 스타일을 적용할 때 사용
 - 문법 : 부모선택자 > 자식 선택자 {속성명:값; ... ;}
	예)div > p {color : gray;}	/* 모든 div안에 있는 모든 p자식요소의 글자색 변경*/

3.인접 형제 선택자(adjacent sibling selector)
 - 계층 구조로 접근 했을때 처음 등장하는 요소를 형요소, 뒤에 등장하는 요소를 동생요소라 보고, 형 요소 뒤에 오는 동생 요소에 스타일 적용
 - 문법 : 형선택자 + 동생선택자{속성명:값; ... ;}
 	예)h1 + h2{color:gray;}	/* h1 다음에 오는 h2 요소의 글자색 변경*/

4. 선택자 그룹화
 - 여러 선택자에 동일한 스타일을 적용해야 할 경우 각 선택자 별로 같은 선언문을 반복해서 작성하는 대신 선택자를 그룹화하여 표현할 수 있음
 - 문법 : 선택자1, 선택자2, ... ,선택자n{속성명:값; ... ;}
 	예) div p, h1+h2, .note, #test{color:gray;}	/*지정한 선택자들에 해당하는 요소의 글자색 변경*/

css에서 사용하는 색상 및 크기단위
1. 색상표시법
 - 영문 색상명 : white,black,green,red,lightgreen등
 - RGB표기법
 	1)6자리의 16진수로 RGB의 값을 표현
	 - 예) #000000 : 검정 , #ffffff:흰색, #ff0000 빨강 등
	 - 색상값이 두자리씩 동일한 값으로 동작되면 세자리 값으로 표현 가능
	 	예)#000000 -> #000 / #ff0000 -> #f00 등
	2) 세개의 10진수로 RGB값을 표현
	 - 예) rgb 256

2. 크기단위
 - css에서 사용하는 크기의 단위는 변하지 않는 절대 단위와 해상도나 기타 요건에 따라 변한느 상대 단위로 나뉨
 - 절대단위 : pt, mm , cm, in(주로 프린터 등에서 실물 출력용으로 사용됨)
 - 상대단위 : px, ex, em, %
 	px : 픽셀로 해상도에 따라 변하며 가장 작은 단위로 가장 많이 사용
	ex : 소문자 x의 크기를 기준으로 지정하는 단위
	em : 사이트 기본 글자 크기 (body 태그의 글자 크기)를 기준으로 배수(실수 사용 가능)을 지정
	% : em과 동일하게 기본 글자 크기 (body 태그의 글자 크기)를 기준으로 백분율 지정




	

