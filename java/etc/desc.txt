JVM의 메모리 모델
 - 메소드 영역(method area) : 메소드, static - 특정 인스턴스에 속하지 않고 공용으로 사용되는 영역
 - 스택 영역(stack area) : 지역변수, 매개변수 등이 저장되는 공간 - 프로그램의 실행 과정에서 임시로 할당되었다가 
						 메소드가 종료되면 소멸하는 데이터들을 저장하는 공간
 - 힙 영역(heap area) : 인스턴스 등이 저장되는 공간 - 스택 영역의 데이터들 처럼 프로그램의 실행과정에서 생성되었다가 소멸되는 영역으로
 												스택영역에 같이 들어가지 않고 따로 힙 영역이 존재하는 이유는 지역변수나 매개변수 등과
												소멸방법이나 시점이 다르기 때문
 
 - 인스턴스 소멸시기 : null을 인위적으로 넣으면 소멸되고, 그렇지 않으면 인스턴스가 생성된 메소드나 프로그램이 종료될 때 같이 소멸됨


예외(exception)
 - 에러가 아닌 프로그램 실행중에 나타나는 예외적인 상황으로 컴파일은 되지만 실행시 특정 상황에서만 문제가 생기는 경우
 - 개발자가 미리 알고 처리해야 하는 작업
 - 자바에서는 예외적인 상황의 처리를 위해 try-catch 제어문을 사용함
 - 문법
try {
	예외가 발생하는지 검사할 실행문들
} catch(try문에서 발생할 예외클래스 매개변수) {
	발생할 예외에 대한 처리문;
}
[
catch(try문에서 발생할 예외클래스2 매개변수2{
	발생할 예외에 대한 처리문2;
} ... catch(try문에서 발생할 예외클래스n 매개변수n){
	발생할 예외에 대한 처리문n;
} ]
 - 하나의 try에 여러 개의 catch문을 사용할 수 있음
 - 단, 여러 catch문을 사용할 경우 반드시 상위클래스에 해당하는 예외는 아래쪽에 배치해야 함
 	예) Exception 클래스는 항상 가장 마지막 catch문에서 사용해야 함
 - finally : try나 catch문 중간에 return으로 메소드를 종료시켜도 실행되는 영역
 	예외 발생과 상관없이 반드시 실행되어야 하는 실행문을 입력하는 영역
	예) DB Connection 닫기, ResultSet 닫기 등의 기능을 finally 영역에서 사용함

